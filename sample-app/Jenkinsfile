pipeline {
   tools {
        maven 'Maven3'
    }
    agent any
    environment {
        registry = "858903924214.dkr.ecr.us-east-1.amazonaws.com/eks-demo-app"
        awsRegion = "us-east-1"
    }
   
    stages {
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/akannan1087/docker-spring-boot']]])     
            }
        }
      stage ('Build') {
          steps {
            sh 'mvn clean install'           
            }
      }
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry 
          dockerImage.tag("$BUILD_NUMBER")
        }
      }
    }
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
        withAWS(region: 'us-east-1', credentials: 'awsaccess') {
         script {
                sh """aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${registry}
                        docker push ${registry}:$BUILD_NUMBER"""
         }
        }
     }
      }
        stage ('Update kubeconfig and Helm Deploy') {
          steps {
            withAWS(region: awsRegion, credentials: 'awsaccess') {
            script {
                // Update kubeconfig
                sh "aws eks update-kubeconfig --name demo --region ${awsRegion}"
                // Verify the kubeconfig was successfully updated
                sh "kubectl config use-context demo"
                sh "helm upgrade first --install .sample-app/mychart --namespace demo-app --set image.tag=$BUILD_NUMBER"
                }
            }
          }
        }
    }
}